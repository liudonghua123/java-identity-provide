<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"

       default-init-method="initialize"
       default-destroy-method="destroy">

    <bean id="shibboleth.SessionIDGenerator"
        class="net.shibboleth.utilities.java.support.security.impl.SecureRandomIdentifierGenerationStrategy"
        c:identifierSize="%{idp.session.idSize:32}" />

    <bean id="shibboleth.DefaultSPSessionSerializerRegistry"
            class="net.shibboleth.idp.session.SPSessionSerializerRegistry">
        <property name="mappings">
            <map>
                <entry key="#{ T(net.shibboleth.idp.session.BasicSPSession) }">
                    <bean class="net.shibboleth.idp.session.impl.BasicSPSessionSerializer"
                        c:offset="%{idp.session.slop:PT0S}" />
                </entry>
                <entry key="#{ T(net.shibboleth.idp.saml.session.SAML1SPSession) }">
                    <bean class="net.shibboleth.idp.saml.session.impl.SAML1SPSessionSerializer"
                        c:offset="%{idp.session.slop:PT0S}" />
                </entry>
                <entry key="#{ T(net.shibboleth.idp.saml.session.SAML2SPSession) }">
                    <bean class="net.shibboleth.idp.saml.session.impl.SAML2SPSessionSerializer"
                        c:offset="%{idp.session.slop:PT0S}"
                        p:parserPool-ref="shibboleth.ParserPool"
                        depends-on="shibboleth.OpenSAMLConfig" />
                </entry>
                <entry key="#{T(net.shibboleth.idp.cas.session.impl.CASSPSession)}">
                    <bean class="net.shibboleth.idp.cas.session.impl.CASSPSessionSerializer"
                        c:offset="%{idp.session.slop:PT0S}" />
                </entry>
            </map>
        </property>
    </bean>
    
    <bean id="shibboleth.DefaultSessionTypeProtocolMap"
            class="org.springframework.beans.factory.config.MapFactoryBean">
        <property name="sourceMap">
            <map>
                <entry key="#{T(net.shibboleth.idp.saml.session.SAML1SPSession)}">
                    <util:constant static-field="org.opensaml.saml.common.xml.SAMLConstants.SAML11P_NS" />
                </entry>
                <entry key="#{T(net.shibboleth.idp.saml.session.SAML2SPSession)}">
                    <util:constant static-field="org.opensaml.saml.common.xml.SAMLConstants.SAML20P_NS" />
                </entry>
                <entry key="#{T(net.shibboleth.idp.cas.session.impl.CASSPSession)}">
                    <util:constant static-field="net.shibboleth.idp.cas.config.AbstractProtocolConfiguration.PROTOCOL_URI" />
                </entry>
            </map>
        </property>
    </bean>
    
    <bean id="shibboleth.SessionManager" class="net.shibboleth.idp.session.impl.StorageBackedSessionManager"
            depends-on="shibboleth.OpenSAMLConfig"
            p:httpServletRequest-ref="shibboleth.HttpServletRequest"
            p:httpServletResponse-ref="shibboleth.HttpServletResponse"
            p:authenticationFlowDescriptors="#{@'shibboleth.AuthenticationFlowDescriptorManager'.getComponents()}"
            p:cookieManager-ref="shibboleth.CookieManager"
            p:storageService-ref="#{'%{idp.session.StorageService:shibboleth.ClientSessionStorageService}'.trim()}"
            p:consistentAddressCondition="#{getObject('%{idp.session.consistentAddressCondition:}'.trim()) ?:
                T(net.shibboleth.idp.session.impl.StorageBackedSessionManager.DefaultConsistentAddressConditionFactory).getDefaultConsistentAddressCondition(%{idp.session.consistentAddress:true})}"
            p:sessionTimeout="%{idp.session.timeout:PT60M}"
            p:sessionSlop="%{idp.session.slop:PT0S}"
            p:maskStorageFailure="%{idp.session.maskStorageFailure:false}"
            p:trackSPSessions="%{idp.session.trackSPSessions:false}"
            p:secondaryServiceIndex="%{idp.session.secondaryServiceIndex:false}"
            p:IDGenerator-ref="shibboleth.SessionIDGenerator"
            p:SPSessionSerializerRegistry="#{getObject('shibboleth.SPSessionSerializerRegistry') ?: getObject('shibboleth.DefaultSPSessionSerializerRegistry')}" />

    <!-- Management bean to collect and expose LogoutPropagationFlowDescriptors. -->
    
    <bean id="shibboleth.LogoutPropagationFlowDescriptorManager"
        class="net.shibboleth.idp.session.impl.LogoutPropagationFlowDescriptorManager"
        p:components="#{getObject('shibboleth.LogoutPropagationFlows')}" />

    <!-- Built-in logout propagation flows. -->

    <!-- These bean IDs have to be set (vs. just p:id) because the original config ref'd them. -->

    <bean id="logoutprop/cas" class="net.shibboleth.idp.session.LogoutPropagationFlowDescriptor"
          c:_0="net.shibboleth.idp.cas.session.impl.CASSPSession" />

    <bean id="logoutprop/saml2" class="net.shibboleth.idp.session.LogoutPropagationFlowDescriptor"
          c:_0="net.shibboleth.idp.saml.session.SAML2SPSession" />

    <!-- Selector function used in logout-propagation UI and logout-propagation driver flow -->

    <bean id="shibboleth.LogoutPropagationFlowSelector" depends-on="shibboleth.LogoutPropagationFlowDescriptorManager"
          class="net.shibboleth.idp.session.logic.LogoutPropagationFlowDescriptorSelector"
          c:flows="#{@'shibboleth.LogoutPropagationFlowDescriptorManager'.getComponents()}" />

    <!-- The import is at the bottom to avoid a depends-on in a user-editable file. -->
    <import resource="${idp.home}/conf/session-manager.xml" />

</beans>
